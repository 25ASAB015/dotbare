#!/bin/bash
#
# unstage the selected staged file
# or reset the commit to certain point
#
# @params
# Globals
#   ${mydir}: current directory of the script
#   ${reset_commit}: search commits and reset selected commit instead of files
#   ${reset_option}: git reset flag, --mixed | --soft | --hard
#   ${all_files}: search all files and select a commit to reset
#   ${selected_files}: selected file to unstage
#   ${selected_commit}: selected commit to reset
#   ${confirm}: confirmation status of the user
# Arguments
#   -h: show help message and quit
#   -a: select files and select a commit to reset the fiel back to selected commit
#   -c: reset commit
#   -S: use --soft flag
#   -H: use --hard flag

set -e
set -f

mydir="${0%/*}"
source "${mydir}"/../helper/set_variable.sh
source "${mydir}"/../helper/get_confirmation.sh
source "${mydir}"/../helper/git_query.sh

function usage() {
  echo -e "Usage: dotbare freset [-h] [-c] [-S] [-H] ...\n"
  echo -e "Reset/Unstage the selected staged file"
  echo -e "Or reset the HEAD to certain commits by using -c flag\n"
  echo -e "optional arguments:"
  echo -e "  -h\tshow this help message and exit"
  echo -e "  -a\tselect files and then select a commit to reset the file back to the selected comit"
  echo -e "  -c\treset commit to certain commit, default --mixed flag, reset HEAD to certain commit put all changes into modified states"
  echo -e "  -S\treset commit using --soft flag, reset HEAD to certain commit without modify working tree"
  echo -e "  -H\treset commit using --hard flag, reset HEAD to certain commit dicard all changes from the working tree"
}

reset_commit=""
reset_option="--mixed"
all_files=""

while getopts ":hacSH" opt
do
  case "$opt" in
    a)
      all_files="true"
      ;;
    c)
      reset_commit="true"
      ;;
    S)
      reset_option="--soft"
      ;;
    H)
      reset_option="--hard"
      ;;
    h)
      usage
      exit 0
      ;;
    *) 
      echo "Invalid option: ${OPTARG}" >&2
      usage
      exit 1
      ;;
  esac
done

if [[ -n "${reset_commit}" ]]; then
  selected_commit=$(get_commit)
  [[ -z "${selected_commit}" ]] && exit 0
  confirm=$(get_confirmation "Reset HEAD to ${selected_commit} ${reset_option}?")
  [[ "${confirm}" != 'y' ]] && exit 0
  /usr/bin/git --git-dir="${DOTBARE_DIR}" --work-tree="${DOTBARE_TREE}" reset "${selected_commit}" "${reset_option}"
else
  if [[ -z "${all_files}" ]]; then
    selected_files=$(get_modified_file 'select files to unstage' 'staged' | tr '\n' ' ')
    [[ -z "${selected_files}" ]] && exit 0
    # shellcheck disable=SC2086
    /usr/bin/git --git-dir="${DOTBARE_DIR}" --work-tree="${DOTBARE_TREE}" reset HEAD ${selected_files}
  else
    selected_files=$(get_git_file 'select a file to reset' | tr '\n' ' ')
    [[ -z "${selected_files}" ]] && exit 0
    selected_commit=$(get_commit "select the target commit" "${selected_files}")
    [[ -z "${selected_commit}" ]] && exit 0
    # shellcheck disable=SC2086
    /usr/bin/git --git-dir="${DOTBARE_DIR}" --work-tree="${DOTBARE_TREE}" reset "${selected_commit}" ${selected_files}
  fi
fi
